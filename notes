9-08
	A heap priority queue can only remove the minimum priority object. Thus, for a to do list, only the job with the highest priority would be removed. This is ineffective if a user completes a job without the highest priority.

	Solution:
	Save the name of the current job with the highest priority. Change the priority of the completed job to the highest priority and then removeMin. To set the jobs priority, the jobs will be stored in a linkedlist. Cycle through the jobs until the one with the same name is found. Edit the priority. Perform an upheap. Then removeMin. Reset the job with the original highest priority to the highest priority.

	---
	Priority queue places objects by their priority. The index of the objects is the same as their priority.Therefore, each object can be found by their previous index.

	---
	Priority queue needs to be printed.They must be in an array and printed from their in order of their keys. A heap cannot garentee that the nodes in a heap will be in order from left to right. Instead of sorting left to right, easier just to put nodes in an array and do selection/insertion sort. Scrapping heap priority queue...
	
	---
	Test ArrayList. If arraylist removes empty spaces and shifts other entries then arraylist with selection/insertion sort will be used. If not, heap with selection/insertion sort will be used. This is to preserve space. If an entry is removed and the blank space is not removed/nothing is shifted to take up the space, the arraylist will use a lot of memory.

9-09

The arraylist class removes any empty spaces. Thus arraylist with selection/insertion sort will be used.

9-10

ArrayList class being built. Needs add and remove methods. May want to change name of "insert" method. See if there's a built in function to remove jobs with a specific attribute for the arraylist class.

9-11
Remove function in ListSort. Have the user input the priority to remove. Easier to search because array is ordered by priority.

	---
	ToDoList not being sorted. Need further debugging using jdb or check algorithm by duplication on a separate simpiler program.

9-13

Sorting works. Changed one number in for loop. Did not recomplie so changes did not take effect. Once recompiled, it worked fine.

Going to switch over to using a heappriorityqueue. can sort in nlogn time. in insertion sort, can only sort in O(n^2) time

	---
	Changing HeapPriorityQueue to have a parameter of heaplist for its operations. Thus a heap can be held, and another modified and sorted. Two heaps will be kept at once in the heap priority queue.

9-14

Need three arrays to store data. One to keep heap, another to remove min, and another to output. Consequently, methods hasLeft,hasRight,removeMin, downheap to adjust for the remove min heap.

	---
	Sorting by heap not needed right now. Since were only sorting 10 objects, we can optomize later. For later, the an array should insert into the heap (must insert at end of heap) and then upheap after each level is inserted. This will ensure jobs can be removed then added back into the heap and resorted.Work for later.
